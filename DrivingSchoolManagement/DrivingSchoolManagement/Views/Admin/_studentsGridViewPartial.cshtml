@using DrivingSchoolDb;
@using DrivingSchoolManagement.Models;
@using DrivingSchoolManagement.ViewModels;
@model List<StudentViewModel>

@{
    var userId = (int)Session["UserID"];
}
@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "StudentsGrid";
        settings.CallbackRouteValues = new { Controller = "Admin", Action = "StudentsGridViewPartial" };
        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Admin", Action = "StudentsGridViewPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Admin", Action = "StudentsGridViewPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Admin", Action = "StudentsGridViewPartialDelete" };
        settings.Width = Unit.Percentage(100);
        settings.SettingsPager.PageSize = 25;
        settings.SettingsBehavior.ConfirmDelete = false;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.ShowNewButtonInHeader = true;
        settings.KeyFieldName = "UserID";
        settings.SettingsCommandButton.NewButton.Text = "Dodaj kursanta";
        settings.SettingsCommandButton.EditButton.Text = "Edytuj";
        settings.SettingsCommandButton.DeleteButton.Text = "Usuń";
        settings.SettingsPager.Visible = true;
        settings.Settings.ShowFilterRow = true;
        settings.CommandColumn.Visible = true;
        settings.SettingsDetail.ShowDetailRow = true;
        settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = false;

        settings.CellEditorInitialize = (s, e) =>
        {
            ASPxEdit editor = (ASPxEdit)e.Editor;
            editor.ValidationSettings.Display = Display.Dynamic;
        };
        settings.CellEditorInitialize = (s, e) =>
        {
            MVCxGridView gridView = s as MVCxGridView;

            if (gridView.IsNewRowEditing)
            {
                if (e.Column.FieldName == "CategoryID")
                {
                    (e.Editor as ASPxComboBox).Value = "";
                }
            }
        };
        settings.Columns.Add(column =>
        {
            column.FieldName = "UserID";
            column.Width = 10;
            column.Visible = false;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "FirstName";
            column.Caption = "Imie";
            column.Settings.AutoFilterCondition = AutoFilterCondition.BeginsWith;
            column.CellStyle.HorizontalAlign = HorizontalAlign.Center;
            column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            column.EditorProperties().TextBox(tx =>
            {
                tx.ValidationSettings.RequiredField.IsRequired = true;
                tx.ValidationSettings.Display = Display.Dynamic;
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "LastName";
            column.Caption = "Nazwisko";
            column.Settings.AutoFilterCondition = AutoFilterCondition.BeginsWith;
            column.CellStyle.HorizontalAlign = HorizontalAlign.Center;
            column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            column.EditorProperties().TextBox(tx =>
            {
                tx.ValidationSettings.RequiredField.IsRequired = true;
                tx.ValidationSettings.Display = Display.Dynamic;
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "DateOfBirth";
            column.Caption = "Data urodzenia";
            column.PropertiesEdit.DisplayFormatString = "dd MMMM yyyy";
            column.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            column.CellStyle.HorizontalAlign = HorizontalAlign.Center;
            column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            column.EditorProperties().DateEdit(de =>
            {
                de.DisplayFormatString = "dd MMMM yyyy";
                de.ValidationSettings.RequiredField.IsRequired = true;
                de.ValidationSettings.Display = Display.Dynamic;
            });
            column.SetDataItemTemplateContent(c =>
            {
                var dateOfBirth = (DateTime?)DataBinder.Eval(c.DataItem, "DateOfBirth");
                if (dateOfBirth != null)
                {
                    ViewContext.Writer.WriteLine(dateOfBirth.Value.ToString("dd MMMM yyyy"));
                }
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Email";
            column.Caption = "E-mail";
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.CellStyle.HorizontalAlign = HorizontalAlign.Center;
            column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            column.EditorProperties().TextBox(tx =>
            {
                tx.ValidationSettings.RequiredField.IsRequired = true;
                tx.ValidationSettings.Display = Display.Dynamic;
                tx.ValidationSettings.RegularExpression.ValidationExpression = @"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*";
                tx.ValidationSettings.RegularExpression.ErrorText = "Adres e-mail ma niepoprawny format!";
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "CategoryID";
            column.UnboundType = DevExpress.Data.UnboundColumnType.String;
            column.Caption = "Kategoria";
            column.Width = 50;
            column.CellStyle.Font.Bold = true;
            column.Settings.AllowHeaderFilter = DefaultBoolean.False;
            column.Settings.FilterMode = ColumnFilterMode.DisplayText;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.CellStyle.HorizontalAlign = HorizontalAlign.Center;
            column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            column.EditorProperties().ComboBox(cb =>
            {
                cb.TextField = "CategoryName";
                cb.ValueField = "CategoryID";
                cb.ValueType = typeof(int);
                cb.DataSource = DrivingSchoolDataProvider.GetCategories();
                cb.ValidationSettings.Display = Display.Dynamic;
                cb.ValidationSettings.RequiredField.IsRequired = true;
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "AssignedDriverID";
            column.Caption = "Przypisany instruktor";
            column.CellStyle.HorizontalAlign = HorizontalAlign.Center;
            column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            ComboBoxProperties propertiesComboBox = column.PropertiesEdit as ComboBoxProperties;
            propertiesComboBox.DataSource = DrivingSchoolDataProvider.GetDrivers();
            propertiesComboBox.TextField = "FullName";
            propertiesComboBox.ValueField = "AssignedDriverID";
            propertiesComboBox.ValueType = typeof(int);

            column.SetEditItemTemplateContent(p =>
            {
                var categoryId = (int?)DataBinder.Eval(p.DataItem, "CategoryID");
                var actualDriver = (int?)DataBinder.Eval(p.DataItem, "AssignedDriverID");
                if (actualDriver == 0) actualDriver = null;
                var driversForCategory = DrivingSchoolDataProvider.GetDriversForUserCategory(categoryId);
                Html.DevExpress().ComboBox(cb =>
                {
                    cb.Name = "AssignedDriverID";
                    cb.Width = Unit.Percentage(100);
                    cb.Properties.TextField = "FullName";
                    cb.Properties.ValidationSettings.Display = Display.Dynamic;
                    cb.Properties.ValidationSettings.RequiredField.IsRequired = true;
                    cb.Properties.ValueField = "AssignedDriverID";
                    cb.Properties.Columns.Add("FullName", "Imię i nazwisko", 50);
                    cb.Properties.Columns.Add("Category", "Kategoria", 50);
                    cb.Properties.TextFormatString = "{0}";
                    cb.Properties.ValueType = typeof(int);
                }).BindList(driversForCategory).Bind(actualDriver).GetHtml();
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Lessons";
            column.UnboundType = DevExpress.Data.UnboundColumnType.Integer;
            column.Caption = "Nauki praktyczne";
            column.ToolTip = "Przyszłe (wszystkie)";
            column.Width = 50;
            column.ReadOnly = true;
            column.CellStyle.Font.Bold = true;
            column.Settings.AllowHeaderFilter = DefaultBoolean.False;
            column.Settings.FilterMode = ColumnFilterMode.DisplayText;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            column.CellStyle.HorizontalAlign = HorizontalAlign.Center;
            column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            column.SetEditItemTemplateContent(c => { });
            column.SetDataItemTemplateContent(c =>
            {
                ViewContext.Writer.Write(DrivingSchoolDataProvider.GetLessonsForUser((int)DataBinder.Eval(c.DataItem, "UserID")));
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "About";
            column.Caption = "Dodatkowe informacje";
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.CellStyle.HorizontalAlign = HorizontalAlign.Center;
            column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            column.EditorProperties().TextBox(tx =>
            {
                tx.ValidationSettings.RequiredField.IsRequired = false;
                tx.ValidationSettings.Display = Display.Dynamic;
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "PESEL";
            column.Caption = "PESEL";
            column.Visible = false;
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.CellStyle.HorizontalAlign = HorizontalAlign.Center;
            column.EditorProperties().TextBox(tx =>
            {
                tx.ValidationSettings.RequiredField.IsRequired = true;
                tx.ValidationSettings.Display = Display.Dynamic;
                tx.MaskSettings.Mask = "00000000000";
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "StreetName";
            column.Caption = "Ulica";
            column.Visible = false;
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.EditorProperties().TextBox(tx =>
            {
                tx.ValidationSettings.RequiredField.IsRequired = false;
                tx.ValidationSettings.Display = Display.Dynamic;
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "Number";
            column.Caption = "Numer domu";
            column.Visible = false;
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.EditorProperties().TextBox(tx =>
            {
                tx.ValidationSettings.RequiredField.IsRequired = true;
                tx.ValidationSettings.Display = Display.Dynamic;
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "City";
            column.Caption = "Miejscowośc";
            column.Visible = false;
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.EditorProperties().TextBox(tx =>
            {
                tx.ValidationSettings.RequiredField.IsRequired = true;
                tx.ValidationSettings.Display = Display.Dynamic;
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "PostalCode";
            column.Caption = "Kod pocztowy";
            column.Visible = false;
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.EditorProperties().TextBox(tx =>
            {
                tx.ValidationSettings.RequiredField.IsRequired = true;
                tx.ValidationSettings.Display = Display.Dynamic;
                tx.MaskSettings.Mask = "00-000";
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "Country";
            column.Caption = "Państwo";
            column.Visible = false;
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.EditorProperties().TextBox(tx =>
            {
                tx.ValidationSettings.RequiredField.IsRequired = true;
                tx.ValidationSettings.Display = Display.Dynamic;
            });
        });

        settings.SetDetailRowTemplateContent(c =>
        {
            if (c.KeyValue.ToString() != "0")
            {
                Html.RenderAction("UserExtraDataPartial", "Drivers", new
                {
                    UserID = DataBinder.Eval(c.DataItem, "UserID"),
                });
            }
        });

        settings.EditFormLayoutProperties.Items.AddGroupItem(g =>
        {
            g.ColumnCount = 2;
            g.Caption = "Informacje podstawowe";

            g.Items.Add("FirstName");
            g.Items.Add("LastName");
            g.Items.Add("DateOfBirth");
            g.Items.Add("PESEL");
            g.Items.Add("Email");
            g.Items.Add("About");
            g.Items.Add("CategoryID");
            g.Items.Add("AssignedDriverID");
        });

        settings.EditFormLayoutProperties.Items.AddGroupItem(g =>
        {
            g.ColumnCount = 2;
            g.Caption = "Adres zamieszkania";

            g.Items.Add("StreetName");
            g.Items.Add("Number");
            g.Items.Add("City");
            g.Items.Add("PostalCode");
            g.Items.Add("Country");
        });
        DevExpress.Web.EditModeCommandLayoutItem commandButtons = new DevExpress.Web.EditModeCommandLayoutItem();
        commandButtons.HorizontalAlign = FormLayoutHorizontalAlign.Right;
        commandButtons.RequiredMarkDisplayMode = FieldRequiredMarkMode.Hidden;
        settings.EditFormLayoutProperties.Items.Add(commandButtons);
        settings.SettingsCommandButton.UpdateButton.Text = "Zatwierdź";
        settings.SettingsCommandButton.CancelButton.Text = "Anuluj";
    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()


